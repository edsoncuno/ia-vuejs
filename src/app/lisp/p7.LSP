;MOSTRAR UNA LISTA CON LOS
;FACTORES PRIMOS DEL NUMERO ENTERO POSITIVO
(DEFUN ES_UN_NUMERO_ENTERO_POSITIVO (PARAMETER_0)
      (AND (INTEGERP PARAMETER_0) (> PARAMETER_0 0))
)
(DEFUN ES_UN_NUMERO_PRIMO_POSITIVO (PARAMETER_0)
      (
	    (NOT (ES_UN_NUMERO_ENTERO_POSITIVO PARAMETER_0))
	    'NIL
      )
      (
	    (= PARAMETER_0 1)
	    'NIL
      )
      (SETQ VARIABLE_0 (- PARAMETER_0 1))
      (LOOP
	    (
		  (= VARIABLE_0 1)
		  'T
	    )
	    (
		  (ZEROP (MOD PARAMETER_0 VARIABLE_0))
		  'NIL
	    )
	    (SETQ VARIABLE_0 (- VARIABLE_0 1))
      )
)
(DEFUN SIGUIENTE_NUMERO_PRIMO_POSITIVO (PARAMETER_0)
      (
	    (NOT (ES_UN_NUMERO_ENTERO_POSITIVO PARAMETER_0))
	    2
      )
      (
	    (= PARAMETER_0 1)
	    2
      )
      (LOOP
	    (SETQ PARAMETER_0 (+ PARAMETER_0 1))
	    (
		  (ES_UN_NUMERO_PRIMO_POSITIVO PARAMETER_0)
		  PARAMETER_0
	    )
      )
)
(DEFUN REDUCIR (PARAMETER_0 PARAMETER_1)
;ESTA FUNCION ME RETORNA EL RESULTADO TODAS LAS DIVISIONES
;POSIBLE DE PARAMETERO_0 / PARAMETERO_1
;EN DONDE ME RETORNE UN ENTERO
      (LOOP
	    (
		  (NOT (ZEROP (MOD PARAMETER_0 PARAMETER_1)))
		  PARAMETER_0
	    )
	    (SETQ PARAMETER_0 (/ PARAMETER_0 PARAMETER_1))
      )
)
(DEFUN !7 (PARAMETER_0)
      (
	    (NOT (ES_UN_NUMERO_ENTERO_POSITIVO PARAMETER_0))
	    'NIL
      )
      (
	    (= PARAMETER_0 1)
	    'NIL
      )
      (SETQ LIST_0 NIL)
      (SETQ VARIABLE_0 2)
      (LOOP
	    (
		  (= PARAMETER_0 1)
		  (REVERSE LIST_0)
	    )
	    (
		  (
			(ZEROP (MOD PARAMETER_0 VARIABLE_0))
			(PUSH VARIABLE_0 LIST_0)
			(SETQ PARAMETER_0 (REDUCIR PARAMETER_0 VARIABLE_0))
		  )
	    )
	    (
		  (
			(NOT (ZEROP (MOD PARAMETER_0 VARIABLE_0)))
			(SETQ VARIABLE_0 (SIGUIENTE_NUMERO_PRIMO_POSITIVO VARIABLE_0))
		  )
	    )
      )
)
